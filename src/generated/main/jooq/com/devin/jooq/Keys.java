/*
 * This file is generated by jOOQ.
 */
package com.devin.jooq;


import com.devin.jooq.tables.Auth;
import com.devin.jooq.tables.Users;
import com.devin.jooq.tables.records.AuthRecord;
import com.devin.jooq.tables.records.UsersRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>fdr</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthRecord> PK_USER_EMAIL = UniqueKeys0.PK_USER_EMAIL;
    public static final UniqueKey<UsersRecord> PK_USER_EMAIL_TYPE = UniqueKeys0.PK_USER_EMAIL_TYPE;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<AuthRecord> PK_USER_EMAIL = Internal.createUniqueKey(Auth.AUTH, "pk_user_email", new TableField[] { Auth.AUTH.EMAIL }, true);
        public static final UniqueKey<UsersRecord> PK_USER_EMAIL_TYPE = Internal.createUniqueKey(Users.USERS, "pk_user_email_type", new TableField[] { Users.USERS.EMAIL, Users.USERS.TYPE }, true);
    }
}
